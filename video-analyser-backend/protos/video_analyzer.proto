syntax = "proto3";

package video_analyzer;

service VideoAnalyzerService {
  // Phase 1: Streaming file upload (supports large video files)
  rpc UploadVideo(stream VideoChunk) returns (UploadResponse);

  // Desktop shortcut: register local files without streaming upload
  rpc RegisterLocalVideo(RegisterVideoRequest) returns (RegisterVideoResponse);

  // Phase 3: Chat interface with streaming responses
  rpc SendChatMessage(ChatRequest) returns (stream ChatResponse);

  // Phase 4: Chat history management
  rpc GetLastSession(Empty) returns (LastSessionResponse);
  rpc GetChatHistory(GetHistoryRequest) returns (GetChatHistoryResponse);
  rpc ClearChatHistory(ClearHistoryRequest) returns (ClearHistoryResponse);

  // Session control
  // Explicitly resume a past session by video_id:
  // - Loads the stored video_path into the VideoContext
  // - Returns confirmation and resolved metadata
  rpc ResumeSession(ResumeRequest) returns (ResumeResponse);
}

// File upload messages
message VideoChunk {
  bytes data = 1;
  string filename = 2;
  int32 chunk_index = 3;
}

message UploadResponse {
  string file_id = 1;
  bool success = 2;
  string message = 3;
}

message RegisterVideoRequest {
  string file_path = 1;
  string display_name = 2;
  bool reference_only = 3;  // true = keep original path, false = copy into storage
}

message RegisterVideoResponse {
  string file_id = 1;
  string stored_path = 2;
  string display_name = 3;
  bool copied = 4;
  int64 size_bytes = 5;
  double registered_at = 6;
  string message = 7;
}

// Chat messages
message ChatRequest {
  string message = 1;
  string file_id = 2;  // Optional: which video to analyze
  string context = 3;  // Optional: conversation context from frontend (for session resumption)
}

message ChatResponse {
  enum ResponseType {
    MESSAGE = 0;
    PROGRESS = 1;
    RESULT = 2;
    ERROR = 3;
  }

  ResponseType type = 1;
  string content = 2;
  string agent_name = 3;
  string result_json = 4;  // Structured data (transcripts, detections)
}

// History messages (Phase 4)
message Empty {}

message LastSessionResponse {
  bool has_session = 1;
  string video_id = 2;
  string video_name = 3;
  string video_path = 4;
  int32 message_count = 5;
  string last_updated = 6;
}

message GetHistoryRequest {
  string video_id = 1;
  bool include_full_messages = 2;  // false = summary only, true = include recent messages
}

message GetChatHistoryResponse {
  string video_id = 1;
  string video_name = 2;
  string conversation_summary = 3;
  repeated ChatMessage recent_messages = 4;
  int32 total_messages = 5;
  string created_at = 6;
  string updated_at = 7;
}

message ClearHistoryRequest {
  string video_id = 1;
}

message ClearHistoryResponse {
  bool success = 1;
  string message = 2;
}

message ChatMessage {
  string role = 1;
  string content = 2;
  string timestamp = 3;
}

// Session control messages
message ResumeRequest {
  string video_id = 1; // Required: target session/video identifier
}

message ResumeResponse {
  bool success = 1;
  string message = 2;
  string video_id = 3;
  string video_name = 4;
  string video_path = 5;
}
