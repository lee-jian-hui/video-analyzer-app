name: Build Windows NSIS Installer

on:
  push:
    branches: [ main, feature/integrate-python-backend ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true  # Enable Git LFS for large files

    - name: Verify Required Files
      run: |
        Write-Host "Checking required files..."

        $requiredFiles = @(
          "my-tauri-app/src-tauri/sidecars/launcher-x86_64-pc-windows-msvc.exe",
          "my-tauri-app/src-tauri/sidecars/video_analyzer_backend/video_analyzer_backend.exe",
          "my-tauri-app/src-tauri/sidecars/ollama.exe",
          "my-tauri-app/src-tauri/sidecars/ffmpeg.exe",
          "my-tauri-app/src-tauri/resources/vc_redist.x64.exe",
          "my-tauri-app/src-tauri/resources/dxwebsetup.exe",
          "my-tauri-app/src-tauri/windows/hooks.nsh"
        )

        $missing = @()
        foreach ($file in $requiredFiles) {
          if (!(Test-Path $file)) {
            $missing += $file
            Write-Host "❌ Missing: $file" -ForegroundColor Red
          } else {
            Write-Host "✓ Found: $file" -ForegroundColor Green
          }
        }

        if ($missing.Count -gt 0) {
          Write-Host "`n❌ ERROR: Missing required files!" -ForegroundColor Red
          Write-Host "Please ensure all files are committed before building." -ForegroundColor Yellow
          Write-Host "`nMissing files:" -ForegroundColor Yellow
          $missing | ForEach-Object { Write-Host "  - $_" }
          exit 1
        }

        Write-Host "`n✓ All required files present!" -ForegroundColor Green

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: my-tauri-app/package-lock.json

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: my-tauri-app/src-tauri

    - name: Install Frontend Dependencies
      working-directory: my-tauri-app
      run: npm ci

    - name: Build Tauri NSIS Installer
      working-directory: my-tauri-app
      run: npm run tauri build

    - name: List Build Artifacts
      run: |
        Write-Host "`nBuild Artifacts:" -ForegroundColor Cyan
        Get-ChildItem -Path "my-tauri-app/src-tauri/target/release/bundle" -Recurse -File |
          Where-Object { $_.Extension -eq ".exe" -or $_.Extension -eq ".msi" } |
          ForEach-Object {
            $size = [math]::Round($_.Length / 1MB, 2)
            Write-Host "  $($_.Name) - ${size} MB"
          }

    - name: Upload Windows Installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          my-tauri-app/src-tauri/target/release/bundle/nsis/*.exe
          my-tauri-app/src-tauri/target/release/bundle/msi/*.msi
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          my-tauri-app/src-tauri/target/release/bundle/nsis/*.exe
          my-tauri-app/src-tauri/target/release/bundle/msi/*.msi
        draft: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Build Logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          my-tauri-app/src-tauri/target/release/build/**/*.log
        retention-days: 7
