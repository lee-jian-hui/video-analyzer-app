name: Build Windows NSIS Installer

on:
  push:
    branches: [ main, feature/integrate-python-backend ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true  # Enable Git LFS for large files

    - name: Verify windows directory exists
      run: |
        Write-Host "Checking if windows directory exists..." -ForegroundColor Cyan
        if (Test-Path "my-tauri-app/src-tauri/windows") {
          Write-Host "‚úì windows directory exists" -ForegroundColor Green
          Get-ChildItem "my-tauri-app/src-tauri/windows"
        } else {
          Write-Host "‚úó windows directory NOT found" -ForegroundColor Red
        }

    - name: Download Large Files from GitHub Releases
      run: |
        Write-Host "Downloading large files from GitHub Releases..." -ForegroundColor Cyan

        # Set the release tag where large files are stored
        # Change this to match your release tag (e.g., "v1.0.0-assets" or "large-files")
        $RELEASE_TAG = "large-files"
        $REPO = "${{ github.repository }}"

        # Create directories for downloaded assets
        New-Item -ItemType Directory -Force -Path "my-tauri-app/src-tauri/sidecars" | Out-Null
        New-Item -ItemType Directory -Force -Path "my-tauri-app/src-tauri/resources" | Out-Null

        # Function to download from GitHub Release
        function Download-ReleaseAsset {
          param($filename, $destination)

          $url = "https://github.com/$REPO/releases/download/$RELEASE_TAG/$filename"
          Write-Host "  Downloading $filename..." -ForegroundColor Yellow

          try {
            Invoke-WebRequest -Uri $url -OutFile $destination -ErrorAction Stop
            Write-Host "  ‚úì Downloaded $filename" -ForegroundColor Green
          } catch {
            Write-Host "  ‚úó Failed to download $filename" -ForegroundColor Red
            Write-Host "    URL: $url" -ForegroundColor Gray
            Write-Host "    Error: $_" -ForegroundColor Red
            throw
          }
        }

        # Download all required files
        Write-Host "`nDownloading sidecars..." -ForegroundColor Cyan
        Download-ReleaseAsset "launcher-x86_64-pc-windows-msvc.exe" "my-tauri-app/src-tauri/sidecars/launcher-x86_64-pc-windows-msvc.exe"
        Download-ReleaseAsset "ollama.exe" "my-tauri-app/src-tauri/sidecars/ollama.exe"
        Download-ReleaseAsset "ffmpeg.exe" "my-tauri-app/src-tauri/sidecars/ffmpeg.exe"

        Write-Host "`nDownloading Python backend..." -ForegroundColor Cyan
        Download-ReleaseAsset "video_analyzer_backend.zip" "backend.zip"
        Expand-Archive -Path "backend.zip" -DestinationPath "my-tauri-app/src-tauri/sidecars" -Force
        Remove-Item "backend.zip"

        Write-Host "`nDownloading system dependencies..." -ForegroundColor Cyan
        New-Item -ItemType Directory -Force -Path "my-tauri-app/src-tauri/resources/installers" | Out-Null
        Download-ReleaseAsset "vc_redist.x64.exe" "my-tauri-app/src-tauri/resources/installers/vc_redist.x64.exe"
        Download-ReleaseAsset "dxwebsetup.exe" "my-tauri-app/src-tauri/resources/installers/dxwebsetup.exe"

        Write-Host "`nDownloading Ollama models..." -ForegroundColor Cyan
        Download-ReleaseAsset "ollama-models.zip" "models.zip"
        Expand-Archive -Path "models.zip" -DestinationPath "my-tauri-app/src-tauri/resources/ollama_models" -Force
        Remove-Item "models.zip"

        Write-Host "`n‚úì All files downloaded successfully!" -ForegroundColor Green
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify Downloaded Files
      run: |
        Write-Host "Verifying downloaded files..." -ForegroundColor Cyan

        $requiredFiles = @(
          "my-tauri-app/src-tauri/sidecars/launcher-x86_64-pc-windows-msvc.exe",
          "my-tauri-app/src-tauri/sidecars/video_analyzer_backend/video_analyzer_backend.exe",
          "my-tauri-app/src-tauri/sidecars/ollama.exe",
          "my-tauri-app/src-tauri/sidecars/ffmpeg.exe",
          "my-tauri-app/src-tauri/resources/installers/vc_redist.x64.exe",
          "my-tauri-app/src-tauri/resources/installers/dxwebsetup.exe"
        )

        $missing = @()
        foreach ($file in $requiredFiles) {
          if (!(Test-Path $file)) {
            $missing += $file
            Write-Host "  ‚úó Missing: $file" -ForegroundColor Red
          } else {
            $size = [math]::Round((Get-Item $file).Length / 1MB, 2)
            Write-Host "  ‚úì $file ($size MB)" -ForegroundColor Green
          }
        }

        if ($missing.Count -gt 0) {
          Write-Host "`n‚ùå ERROR: Missing required files!" -ForegroundColor Red
          $missing | ForEach-Object { Write-Host "  - $_" }
          exit 1
        }

        Write-Host "`n‚úì All required files present!" -ForegroundColor Green

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: my-tauri-app/package-lock.json

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: my-tauri-app/src-tauri

    - name: Install Protocol Buffers Compiler
      run: |
        Write-Host "Installing protoc..." -ForegroundColor Cyan
        choco install protoc -y
        Write-Host "protoc installed successfully" -ForegroundColor Green
        protoc --version

    - name: Install Frontend Dependencies
      working-directory: my-tauri-app
      run: npm ci

    - name: Build Tauri NSIS Installer
      working-directory: my-tauri-app
      run: npm run tauri build

    - name: List Build Artifacts
      run: |
        Write-Host "`nBuild Artifacts:" -ForegroundColor Cyan
        Get-ChildItem -Path "my-tauri-app/src-tauri/target/release/bundle" -Recurse -File |
          Where-Object { $_.Extension -eq ".exe" -or $_.Extension -eq ".msi" } |
          ForEach-Object {
            $size = [math]::Round($_.Length / 1MB, 2)
            Write-Host "  $($_.Name) - ${size} MB"
          }

    - name: Upload Windows Installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          my-tauri-app/src-tauri/target/release/bundle/nsis/*.exe
          my-tauri-app/src-tauri/target/release/bundle/msi/*.msi
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          my-tauri-app/src-tauri/target/release/bundle/nsis/*.exe
          my-tauri-app/src-tauri/target/release/bundle/msi/*.msi
        draft: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Development Release
      if: github.ref == 'refs/heads/feature/integrate-python-backend' && !startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        tag_name: dev-latest
        name: "Development Build (Latest)"
        body: |
          üöÄ **Automated Development Build**

          Built from commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}

          ‚ö†Ô∏è This is a development build and may be unstable.

          ## Installers
          - **NSIS Setup**: `my-tauri-app_0.1.0_x64-setup.exe` - Full installer with all dependencies
          - **MSI Package**: `my-tauri-app_0.1.0_x64_en-US.msi` - Windows Installer package

          ## What's Included
          - Python backend with video analysis capabilities
          - Ollama AI models
          - FFmpeg for video processing
          - All system dependencies
        files: |
          my-tauri-app/src-tauri/target/release/bundle/nsis/*.exe
          my-tauri-app/src-tauri/target/release/bundle/msi/*.msi
        prerelease: true
        draft: false
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Build Logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          my-tauri-app/src-tauri/target/release/build/**/*.log
        retention-days: 7
