name: Build Windows Installer End to End


on:
  workflow_dispatch:
  push:
    branches:
      - '**'
jobs:
  build-windows:
    runs-on: windows-latest
    env:
      PLATFORM_SUFFIX: x86_64-pc-windows-msvc

    steps:
      # --- Step 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Step 2. Setup Node and Rust (for Tauri)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # --- Step 3. Setup Python & PyInstaller
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install PyInstaller
        run: pip install pyinstaller

      # --- Step 4. Build Python backend EXE
      - name: Build backend with PyInstaller
        working-directory: video-analyser-backend
        run: >
          Write-Host "=== Building Python backend ==="
          Get-Location
          Get-ChildItem

          pyinstaller
            --name video_analyzer_backend
            --onedir
            --noconsole
            --add-data "templates;templates"
            --add-data "protos;protos"
            --hidden-import grpc
            --hidden-import grpc._cython
            --hidden-import grpc._cython.cygrpc
            --hidden-import cv2
            --hidden-import torch
            --hidden-import torchvision
            --hidden-import transformers
            --hidden-import transformers.models
            --hidden-import moviepy
            --hidden-import moviepy.editor
            --hidden-import pytesseract
            --hidden-import langchain
            --hidden-import langchain_community
            --hidden-import langchain_core
            --hidden-import langchain_ollama
            --hidden-import langgraph
            --hidden-import ollama
            server.py



      - name: Debug PyInstaller DLL contents
        shell: pwsh
        run: |
          Write-Host "=== Checking for Python DLLs in PyInstaller build ==="
          $distPath = "video-analyser-backend/dist/video_analyzer_backend"
          if (-Not (Test-Path $distPath)) {
              Write-Host "‚ùå Dist folder not found: $distPath"
              exit 1
          }

          Write-Host "`nüîç Listing Python runtime files (DLLs, pyds, zips):"
          Get-ChildItem -Recurse $distPath -Include *.dll,*.pyd,*.zip | ForEach-Object {
              Write-Host "  - $($_.Name)"
          }

          Write-Host "`nüì¶ Summary of key expected files:"
          $expected = @("python310.dll", "base_library.zip")
          foreach ($file in $expected) {
              $found = Get-ChildItem -Recurse $distPath -Include $file -ErrorAction SilentlyContinue
              if ($found) {
                  Write-Host "‚úÖ Found $file at $($found[0].FullName)"
              } else {
                  Write-Host "‚ùå Missing $file"
              }
          }

          Write-Host "`n‚úÖ DLL check complete ‚Äî verify all dependencies are listed above."
      - name: Debug PyInstaller DLL contents
        shell: pwsh
        run: |
          Write-Host "=== Checking for Python DLLs in PyInstaller build ==="
          $distPath = "video-analyser-backend/dist/video_analyzer_backend"
          if (-Not (Test-Path $distPath)) {
              Write-Host "‚ùå Dist folder not found: $distPath"
              exit 1
          }

          Write-Host "`nüîç Listing Python runtime files (DLLs, pyds, zips):"
          Get-ChildItem -Recurse $distPath -Include *.dll,*.pyd,*.zip | ForEach-Object {
              Write-Host "  - $($_.Name)"
          }

          Write-Host "`nüì¶ Summary of key expected files:"
          $expected = @("python310.dll", "base_library.zip")
          foreach ($file in $expected) {
              $found = Get-ChildItem -Recurse $distPath -Include $file -ErrorAction SilentlyContinue
              if ($found) {
                  Write-Host "‚úÖ Found $file at $($found[0].FullName)"
              } else {
                  Write-Host "‚ùå Missing $file"
              }
          }

          Write-Host "`n‚úÖ DLL check complete ‚Äî verify all dependencies are listed above."


      - name: Debug backend build output
        shell: pwsh
        run: |
          Write-Host "=== Checking backend build output ==="
          Get-ChildItem -Recurse -Directory -Path video-analyser-backend\dist


      - name: Download FFmpeg binary
        shell: pwsh
        run: |
          Write-Host "=== Downloading FFmpeg binary ==="
          $url = "https://github.com/lee-jian-hui/video-analyzer-app/releases/download/large-files/ffmpeg.exe"
          $sidecarDir = "my-tauri-app/src-tauri/sidecars"

          Invoke-WebRequest -Uri $url -OutFile "ffmpeg.exe"

          New-Item -ItemType Directory -Force -Path $sidecarDir | Out-Null
          Move-Item -Force "ffmpeg.exe" "$sidecarDir/ffmpeg-${{ env.PLATFORM_SUFFIX }}.exe"

          Write-Host "‚úÖ FFmpeg placed at $sidecarDir/ffmpeg-${{ env.PLATFORM_SUFFIX }}.exe"
          Get-ChildItem $sidecarDir



      # --- Step 5. Fetch Ollama binary
      - name: Download Ollama EXE from release
        shell: pwsh
        run: |
          Write-Host "=== Downloading Ollama binary ==="
          $ollamaUrl = "https://github.com/lee-jian-hui/video-analyzer-app/releases/download/large-files/ollama.exe"
          $sidecarDir = "my-tauri-app/src-tauri/sidecars"

          # Download
          Invoke-WebRequest -Uri $ollamaUrl -OutFile "ollama.exe"

          # Ensure target directory exists
          New-Item -ItemType Directory -Force -Path $sidecarDir | Out-Null

          # Move and rename to match Tauri‚Äôs expected pattern
          Move-Item -Force "ollama.exe" "$sidecarDir/ollama-${{ env.PLATFORM_SUFFIX }}.exe"

          Write-Host "‚úÖ Ollama binary placed at $sidecarDir/ollama-${{ env.PLATFORM_SUFFIX }}.exe"
          Get-ChildItem $sidecarDir


      - name: Download Ollama models
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/lee-jian-hui/video-analyzer-app/releases/download/large-files/ollama-models.zip" -OutFile "ollama_models.zip"
          New-Item -ItemType Directory -Force -Path "my-tauri-app/src-tauri/resources/ollama_models" | Out-Null
          Expand-Archive -Force "ollama_models.zip" "my-tauri-app/src-tauri/resources/ollama_models"


      - name: Copy backend to Tauri sidecars
        shell: pwsh
        run: |
          Write-Host "=== Copying backend (onedir build) to Tauri sidecars ==="
          $src = "video-analyser-backend/dist/video_analyzer_backend"
          $dstRoot = "my-tauri-app/src-tauri/sidecars"
          $dst = "$dstRoot/video_analyzer_backend"

          # Ensure directories exist
          New-Item -ItemType Directory -Force -Path $dst | Out-Null

          # Copy the entire folder including python310.dll, library.zip, etc.
          Copy-Item -Recurse -Force "$src/*" $dst

          # Rename ONLY the main exe inside the copied directory
          $backendExe = Join-Path $dst "video_analyzer_backend.exe"
          if (Test-Path $backendExe) {
            Rename-Item -Force $backendExe "video_analyzer_backend-${{ env.PLATFORM_SUFFIX }}.exe"
          }

          Write-Host "‚úÖ Backend (onedir) fully copied with dependencies"
          Get-ChildItem -Recurse $dst

      # Install frontend dependencies
      - name: Install NPM dependencies
        working-directory: my-tauri-app
        run: npm ci

      # Install protoc for Rust gRPC build
      - name: Install protoc (Protocol Buffers)
        shell: pwsh
        run: |
          choco install protoc --version=21.12 -y
          $env:Path += ";C:\ProgramData\chocolatey\lib\protoc\tools\bin"
          protoc --version


      - name: Debug file structure (depth 3)
        shell: pwsh
        run: |
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "`n=== Directory Tree (Depth: 3) ==="
          Get-ChildItem -Recurse -Depth 3 | ForEach-Object {
            $indent = '  ' * ($_.FullName.Split('\').Count - (Get-Location).Path.Split('\').Count)
            Write-Host "$indent- $($_.Name)"
          }


      # --- Step: Verify all resources and sidecars before building installer
      - name: Verify resources and sidecars content
        shell: pwsh
        run: |
          Write-Host "=== Verifying packaging contents before build ===" -ForegroundColor Cyan

          $resources = "my-tauri-app/src-tauri/resources"
          $sidecars  = "my-tauri-app/src-tauri/sidecars"

          if (-Not (Test-Path $resources)) {
            Write-Host "‚ùå Missing resources directory ($resources)"
            exit 1
          }
          if (-Not (Test-Path $sidecars)) {
            Write-Host "‚ùå Missing sidecars directory ($sidecars)"
            exit 1
          }

          Write-Host "`nüì¶ Resources directory structure:"
          Get-ChildItem -Recurse -Path $resources | Select-Object FullName, Length

          Write-Host "`n‚öôÔ∏è  Sidecars directory structure:"
          Get-ChildItem -Recurse -Path $sidecars | Select-Object FullName, Length

          Write-Host "`n‚úÖ Verification complete ‚Äî ready for Tauri packaging."



      # Build full Tauri Windows installer
      - name: Build Tauri installer
        working-directory: my-tauri-app
        run: npm run tauri build


      - name: Verify final packaged files inside bundle
        shell: pwsh
        run: |
          Write-Host "=== Verifying built installer contents ===" -ForegroundColor Cyan
          Get-ChildItem -Recurse -Path "my-tauri-app/src-tauri/target/release/bundle" | Select-Object FullName, Length
          Write-Host "‚úÖ Bundle verification complete"

      - name: Debug file structure (depth 3)
        shell: pwsh
        run: |
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "`n=== Directory Tree (Depth: 3) ==="
          Get-ChildItem -Recurse -Depth 3 | ForEach-Object {
            $indent = '  ' * ($_.FullName.Split('\').Count - (Get-Location).Path.Split('\').Count)
            Write-Host "$indent- $($_.Name)"
          }




      # --- Upload installer as artifact
      - name: Upload built installer
        uses: actions/upload-artifact@v4
        with:
          name: video-analyzer-windows-installer
          path: my-tauri-app/src-tauri/target/release/bundle/**

      # --- FINAL: Publish installer to GitHub Release
      - name: Upload installer to GitHub Release (prod-latest)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: prod-latest
          files: |
            my-tauri-app/src-tauri/target/release/bundle/**/*.exe
            my-tauri-app/src-tauri/target/release/bundle/**/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
