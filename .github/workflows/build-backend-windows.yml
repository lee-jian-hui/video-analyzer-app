name: Build Python Backend (Windows)

on:
  workflow_dispatch:
  push:
    branches: [ main, feature/integrate-python-backend ]
    paths:
      - 'video-analyser-backend/**'
      - '.github/workflows/build-backend-windows.yml'

permissions:
  contents: write  # Needed for release upload

jobs:
  # ==============================================================
  # 1️⃣  ENVIRONMENT SETUP (base build tools)
  # ==============================================================
  setup-env:
    runs-on: windows-latest
    outputs:
      python-version: ${{ steps.python.outputs.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Ensure pip cache directory exists
        run: |
          $cachePath = "$env:LOCALAPPDATA\pip\cache"
          if (!(Test-Path $cachePath)) {
            Write-Host "Creating missing pip cache directory..."
            New-Item -ItemType Directory -Force -Path $cachePath | Out-Null
          }

      - name: Install Protocol Buffers Compiler
        run: |
          Write-Host "Installing protoc..." -ForegroundColor Cyan
          choco install protoc -y
          Write-Host "protoc installed successfully" -ForegroundColor Green
          protoc --version

  # ==============================================================
  # 2️⃣  GENERATE gRPC STUBS (runs in parallel)
  # ==============================================================
  generate-grpc:
    needs: setup-env
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install gRPC Tools
        run: pip install grpcio grpcio-tools protobuf

      - name: Generate Python gRPC Code
        working-directory: video-analyser-backend
        run: |
          Write-Host "Generating gRPC Python code..." -ForegroundColor Cyan
          python -m grpc_tools.protoc `
            -Iprotos `
            --python_out=protos `
            --grpc_python_out=protos `
            protos/video_analyzer.proto
          Write-Host "✓ gRPC code generated" -ForegroundColor Green

      - name: Upload Generated gRPC Code
        uses: actions/upload-artifact@v4
        with:
          name: grpc-protos
          path: video-analyser-backend/protos

  # ==============================================================
  # 3️⃣  MODEL PREP 
  #    
  # ==============================================================



  # ==============================================================
  # 4️⃣  MAIN BUILD JOB (depends on gRPC + setup)
  # ==============================================================
  build-backend:
    needs: [setup-env, generate-grpc]
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download gRPC Artifacts
        uses: actions/download-artifact@v4
        with:
          name: grpc-protos
          path: video-analyser-backend/protos

      - name: Ensure ML Models directory exists
        working-directory: video-analyser-backend
        run: |
          if (!(Test-Path "ml-models")) {
            Write-Host "Creating placeholder ml-models directory..." -ForegroundColor Cyan
            New-Item -ItemType Directory -Force -Path ml-models | Out-Null
            # Add placeholder file to prevent PyInstaller errors
            Set-Content -Path "ml-models/placeholder.txt" -Value "Placeholder for model weights"
          }
          Write-Host "✓ ML models directory ready" -ForegroundColor Green

      - name: Install Dependencies with uv
        working-directory: video-analyser-backend
        run: |
          Write-Host "Installing Python dependencies using uv..." -ForegroundColor Cyan

          # Ensure uv is available
          python -m pip install --upgrade uv

          # Show environment info
          uv --version
          python --version

          # Install project dependencies from pyproject.toml
          uv sync --all-extras --dev

          Write-Host "✓ Dependencies installed via uv" -ForegroundColor Green

      - name: Generate PyInstaller Spec
        working-directory: video-analyser-backend
        run: |
          Write-Host "Generating PyInstaller spec..." -ForegroundColor Cyan
          uv run python scripts/generate_pyinstaller_spec.py
          Write-Host "✓ Spec file created" -ForegroundColor Green

      - name: Build Executable
        working-directory: video-analyser-backend
        run: |
          Write-Host "Building Windows executable..." -ForegroundColor Cyan
          pyinstaller video_analyzer_backend.spec
          Write-Host "✓ Build completed" -ForegroundColor Green

      - name: Verify Build Output
        working-directory: video-analyser-backend
        run: |
          $exePath = "dist\video_analyzer_backend\video_analyzer_backend.exe"
          if (!(Test-Path $exePath)) {
            Write-Host "✗ Executable not found at: $exePath" -ForegroundColor Red
            exit 1
          }
          $size = [math]::Round((Get-Item $exePath).Length / 1MB, 2)
          Write-Host "✓ Verified executable exists ($size MB)" -ForegroundColor Green

      - name: Package Backend
        working-directory: video-analyser-backend
        run: |
          Write-Host "Packaging backend..." -ForegroundColor Cyan
          Compress-Archive -Path "dist\video_analyzer_backend\*" -DestinationPath "video_analyzer_backend.zip" -Force
          $zipSize = [math]::Round((Get-Item "video_analyzer_backend.zip").Length / 1MB, 2)
          Write-Host "✓ Package created (size: $zipSize MB)" -ForegroundColor Green

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-backend
          path: video-analyser-backend/video_analyzer_backend.zip
          retention-days: 30
