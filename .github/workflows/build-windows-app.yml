name: Build Windows App (Backend + Installer)

on:
  workflow_dispatch:
  push:
    branches: [ main, feature/integrate-python-backend ]
    paths:
      - 'video-analyser-backend/**'
      - 'my-tauri-app/**'
      - '.github/workflows/build-windows-app.yml'

permissions:
  contents: write

jobs:
  # 1) Env setup (note: each job gets a fresh runner; this doesn't ‚Äúshare tools‚Äù)
  setup-env:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: my-tauri-app/package-lock.json
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - name: Install protoc (not shared across jobs; repeated later in installer job)
        run: choco install protoc -y

  # 2) Build Python backend
  build-backend:
    needs: setup-env
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies with uv
        working-directory: video-analyser-backend
        run: |
          python -m pip install --upgrade uv
          uv --version
          python --version
          uv sync --all-extras --dev

      - name: Generate gRPC stubs
        working-directory: video-analyser-backend
        run: |
          uv run python -m grpc_tools.protoc `
            -Iprotos `
            --python_out=protos `
            --grpc_python_out=protos `
            protos/video_analyzer.proto

      - name: Generate PyInstaller spec
        working-directory: video-analyser-backend
        run: |
          uv run python scripts/generate_pyinstaller_spec.py

      - name: Build backend executable
        working-directory: video-analyser-backend
        run: |
          uv run pyinstaller video_analyzer_backend.spec

      # NEW: validate outputs and produce a manifest
      - name: Validate backend outputs + manifest
        working-directory: video-analyser-backend
        shell: pwsh
        run: |
          $exe = "dist\video_analyzer_backend\video_analyzer_backend.exe"
          if (!(Test-Path $exe)) {
            Write-Host "Missing: $exe" -ForegroundColor Red
            exit 1
          }
          # Optional: ensure expected data folders exist (ok if empty)
          if (!(Test-Path "protos"))   { New-Item -Type Directory -Force -Path "protos"   | Out-Null }
          if (!(Test-Path "ml-models")){ New-Item -Type Directory -Force -Path "ml-models"| Out-Null }

          $items = @(
            "dist\video_analyzer_backend\video_analyzer_backend.exe",
            "protos",
            "ml-models"
          )
          $list = @()
          foreach ($i in $items) {
            if (Test-Path $i) {
              if ((Get-Item $i).PSIsContainer) {
                Get-ChildItem -Recurse -File $i | ForEach-Object {
                  $hash = (Get-FileHash -Algorithm SHA256 $_.FullName).Hash
                  $list += [pscustomobject]@{
                    path = $_.FullName
                    size = $_.Length
                    sha256 = $hash
                  }
                }
              } else {
                $f = Get-Item $i
                $hash = (Get-FileHash -Algorithm SHA256 $f.FullName).Hash
                $list += [pscustomobject]@{
                  path = $f.FullName
                  size = $f.Length
                  sha256 = $hash
                }
              }
            } else {
              Write-Host "Expected path missing: $i" -ForegroundColor Yellow
            }
          }
          $manifest = $list | ConvertTo-Json -Depth 6
          Set-Content -Path "dist\video_analyzer_backend\manifest.json" -Value $manifest -Encoding UTF8

          # Print a quick summary
          Write-Host "Backend output summary:"
          $list | Select-Object path,size | Format-Table | Out-String | Write-Host

      - name: Package backend
        working-directory: video-analyser-backend
        run: |
          # Zip the directory itself so the top-level folder exists inside the zip
          Compress-Archive -Path "dist\video_analyzer_backend" -DestinationPath "video_analyzer_backend.zip" -Force

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-zip
          path: video-analyser-backend/video_analyzer_backend.zip
          retention-days: 30

  # 3) Build Tauri installer (depends on backend artifact)
  build-installer:
    needs: build-backend
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-zip            # <-- matches uploader above
          path: my-tauri-app/src-tauri/sidecars

      - name: Unpack backend
        working-directory: my-tauri-app/src-tauri/sidecars
        shell: pwsh
        run: |
          Expand-Archive -Path "video_analyzer_backend.zip" -DestinationPath "." -Force
          if (!(Test-Path "video_analyzer_backend/video_analyzer_backend.exe")) {
            Write-Host "Backend EXE missing at sidecars/video_analyzer_backend/video_analyzer_backend.exe" -ForegroundColor Red
            exit 1
          }
          if (Test-Path "video_analyzer_backend/manifest.json") {
            Write-Host "Manifest present:"
            Get-Content "video_analyzer_backend/manifest.json" | Out-Host
          }

      # If you host other sidecars in a Release, pull them here (names must match tauri.conf.json)
      - name: Stage launcher/ffmpeg/ollama sidecars (from Release)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $repo = "${{ github.repository }}"
          $tag  = "large-files"
          $dst  = "my-tauri-app/src-tauri/sidecars"
          New-Item -ItemType Directory -Force -Path $dst | Out-Null

          function Get-Release($name, $out) {
            $url = "https://github.com/$repo/releases/download/$tag/$name"
            Write-Host "‚¨áÔ∏è Downloading $name ‚Üí $out"
            try {
              Invoke-WebRequest -Uri $url -OutFile "$dst\$out" -UseBasicParsing
              if (!(Test-Path "$dst\$out")) {
                Write-Host "‚ùå FAILED to download: $out" -ForegroundColor Red
              } else {
                $size = (Get-Item "$dst\$out").Length / 1MB
                Write-Host "‚úÖ Downloaded $out ($([math]::Round($size,2)) MB)"
              }
            } catch {
                Write-Host "‚ö†Ô∏è Error downloading $name: $($_)" -ForegroundColor Yellow
            }
          }

          # Download sidecars
          Get-Release "launcher-x86_64-pc-windows-msvc.exe" "launcher-x86_64-pc-windows-msvc.exe"
          Get-Release "ffmpeg.exe" "ffmpeg.exe"
          Get-Release "ollama.exe" "ollama.exe"

          # Ensure architecture-suffixed copies for Tauri
          $bins = @(
            "launcher",
            "ollama",
            "ffmpeg"
          )
          foreach ($b in $bins) {
            $src = "$dst\$b.exe"
            $target = "$dst\$b-x86_64-pc-windows-msvc.exe"
            if (Test-Path $src) {
              Copy-Item $src $target -Force
              Write-Host "üîÅ Created Tauri-compatible copy: $target"
            } else {
              Write-Host "‚ö†Ô∏è Missing base exe: $src" -ForegroundColor Yellow
            }
          }

          # Create resource dirs and verify results
          New-Item -ItemType Directory -Force -Path "my-tauri-app/src-tauri/resources/installers" | Out-Null
          New-Item -ItemType Directory -Force -Path "my-tauri-app/src-tauri/resources/ollama_models" | Out-Null

          Write-Host "`nüìÇ Final sidecar directory contents:"
          Get-ChildItem -Recurse -File $dst | ForEach-Object {
            Write-Host "  - $($_.FullName)"
          }

      # If your Rust build expects proto under src-tauri/proto (tonic-build)
      - name: Sync proto for Rust build (if needed)
        shell: pwsh
        run: |
          if (Test-Path "protos/video_analyzer.proto") {
            New-Item -ItemType Directory -Force -Path "my-tauri-app/src-tauri/proto" | Out-Null
            Copy-Item -Force -Path "protos/video_analyzer.proto" -Destination "my-tauri-app/src-tauri/proto/video_analyzer.proto"
          }

      # Tooling for the Tauri build (each job = fresh VM, so reinstall here)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: my-tauri-app/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Install protoc and expose to PATH
        shell: pwsh
        run: |
          choco install protoc -y
          $protoc = "C:\ProgramData\chocolatey\lib\protoc\tools\bin\protoc.exe"
          Add-Content -Path $env:GITHUB_ENV -Value "PROTOC=$protoc"
          Add-Content -Path $env:GITHUB_ENV -Value "PATH=$env:PATH;$(Split-Path $protoc)"
          & $protoc --version

      - name: Install NSIS + WebView2 (optional but recommended)
        shell: pwsh
        run: |
          choco install nsis -y
          # try {
          #   choco install microsoft-edgewebview2-runtime -y --source="'https://community.chocolatey.org/api/v2/;https://www.nuget.org/api/v2/'"
          # } catch {
          #   Write-Host "WebView2 failed via Chocolatey ‚Äî downloading from Microsoft directly."
          #   $webview2 = "$env:TEMP\MicrosoftEdgeWebView2Setup.exe"
          #   Invoke-WebRequest "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile $webview2
          #   Start-Process -FilePath $webview2 -ArgumentList "/install","/quiet","/norestart" -Wait
          # }

      - name: Verify staged paths
        shell: pwsh
        run: |
          Write-Host "Sidecars:"
          Get-ChildItem -Recurse -File my-tauri-app/src-tauri/sidecars | % { $_.FullName }
          Write-Host "`nResources:"
          Get-ChildItem -Recurse -File my-tauri-app/src-tauri/resources | % { $_.FullName }

      - name: Install frontend deps
        working-directory: my-tauri-app
        run: npm ci


      # - name: Patch sidecar binary naming for Tauri
      #   shell: pwsh
      #   run: |
      #     $dst = "my-tauri-app/src-tauri/sidecars"
      #     $bins = @(
      #       "launcher.exe",
      #       "ffmpeg.exe",
      #       "ollama.exe",
      #       "video_analyzer_backend/video_analyzer_backend.exe"
      #     )
      #     foreach ($b in $bins) {
      #       $src = Join-Path $dst $b
      #       if (Test-Path $src) {
      #         $target = "$src-x86_64-pc-windows-msvc.exe"
      #         Copy-Item $src $target -Force
      #         Write-Host "‚úì Copied $src ‚Üí $target"
      #       } else {
      #         Write-Host "‚ö† Missing expected file: $src" -ForegroundColor Yellow
      #       }
      #     }

      - name: Build Tauri installer
        working-directory: my-tauri-app
        run: npm run tauri build

      - name: Upload installer artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            my-tauri-app/src-tauri/target/release/bundle/nsis/*.exe
            my-tauri-app/src-tauri/target/release/bundle/msi/*.msi
          retention-days: 30


      - name: Publish to GitHub Release (latest)
        if: success()
        continue-on-error: true
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-windows
          name: "Windows Installer (Latest Build)"
          body: |
            **Latest automated build**
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Built on: ${{ github.run_number }}
            
            This release includes:
            - Python backend executable
            - Tauri NSIS installer
            - Ollama + FFmpeg sidecars
          files: |
            my-tauri-app/src-tauri/target/release/bundle/nsis/*.exe
            my-tauri-app/src-tauri/target/release/bundle/msi/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
