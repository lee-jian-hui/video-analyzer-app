name: Build Windows App (Backend + Installer)

on:
  workflow_dispatch:
  push:
    branches: [ main, feature/integrate-python-backend ]
    paths:
      - 'video-analyser-backend/**'
      - 'my-tauri-app/**'
      - '.github/workflows/build-windows-app.yml'

permissions:
  contents: write

jobs:
  # 1️⃣ ENV SETUP
  setup-env:
    runs-on: windows-latest
    outputs:
      python-version: ${{ steps.python.outputs.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: my-tauri-app/package-lock.json
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - name: Install protoc
        run: choco install protoc -y

  # 2️⃣ BUILD PYTHON BACKEND
  build-backend:
    needs: setup-env
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies with uv
        working-directory: video-analyser-backend
        run: |
          python -m pip install --upgrade uv
          uv sync --all-extras --dev

      - name: Generate gRPC Stubs
        working-directory: video-analyser-backend
        run: |
          uv run python -m grpc_tools.protoc `
            -Iprotos `
            --python_out=protos `
            --grpc_python_out=protos `
            protos/video_analyzer.proto

      - name: Generate PyInstaller spec
        working-directory: video-analyser-backend
        run: |
          uv run python scripts/generate_pyinstaller_spec.py

      - name: Build Backend Executable
        working-directory: video-analyser-backend
        run: |
          uv run pyinstaller video_analyzer_backend.spec

      - name: Package Backend
        working-directory: video-analyser-backend
        run: Compress-Archive -Path "dist\video_analyzer_backend\*" -DestinationPath "video_analyzer_backend.zip" -Force

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-zip
          path: video-analyser-backend/video_analyzer_backend.zip

  # 3️⃣ BUILD TAURI INSTALLER
  build-installer:
    needs: build-backend
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-zip
          path: my-tauri-app/src-tauri/sidecars

      - name: Unpack Backend
        working-directory: my-tauri-app/src-tauri/sidecars
        run: Expand-Archive -Path "video_analyzer_backend.zip" -DestinationPath "." -Force

      - name: Install Frontend Dependencies
        working-directory: my-tauri-app
        run: npm ci

      - name: Install Protocol Buffers Compiler
        run: |
          Write-Host "Installing protoc..." -ForegroundColor Cyan
          choco install protoc -y
          $protocPath = "C:\ProgramData\chocolatey\lib\protoc\tools\bin\protoc.exe"
          echo "PROTOC=$protocPath" >> $env:GITHUB_ENV
          echo "PATH=$env:PATH;$(Split-Path $protocPath)" >> $env:GITHUB_ENV
          protoc --version

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: my-tauri-app/src-tauri
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: my-tauri-app/package-lock.json


      - name: Build Tauri Installer
        working-directory: my-tauri-app
        run: npm run tauri build

      - name: Upload Installer Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            my-tauri-app/src-tauri/target/release/bundle/nsis/*.exe
            my-tauri-app/src-tauri/target/release/bundle/msi/*.msi
